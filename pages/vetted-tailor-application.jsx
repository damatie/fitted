import Head from 'next/head'
import {useEffect,useState} from 'react'
import Card from '../components/card'
import { getBanks,resolveBankAccount } from "../services/apiFactory"
 import Layout from '../layouts/appLayout'
import SuccessCard from '../components/successCard'
import MobileForm from '../components/mobileForm'
import data from '../utils/data'
import ProfileImage from '../components/profileImage'
import Errors from "../components/error"


export default function Application() {
  const [banks, setBanks]= useState([])
  const [bankCode, setBankCode] = useState()
  const [accountNumber, setAccountNumber] = useState()
  const [error, setError] = useState()
  const [success, setSuccess] = useState(false)
  const [loading, setLoading] = useState(false)

 


  const getAllBanks =()=>{
    getBanks().then(res => {
      const result = res.data.data
      setBanks(result)
      console.log(result)
    })
   }

// 
const handleBandCode = (e) => {
  const getCode = banks.filter(((bank, index) => bank.name === e.target.value) );
  if(getCode){
   if(  getCode[0]?.code!==undefined){
    setBankCode(getCode[0]?.code)
   }
  }

 }

 const handleAccountNumber =(e)=>{
  setAccountNumber(e.target.value)
}

 const handleSubmit =()=>{
  setLoading(true)
   const accountData = {
    "bankCode":bankCode,
    "accountNo":accountNumber
  }
  resolveBankAccount(accountData).then(res => {
    const applicationResult = res.statusText
    if(applicationResult==="OK"){
      setSuccess(true)
      setError(null)
      setAccountNumber('')
      setBankCode('')
    }
    setLoading(false)
  }
 
  ).catch((err)=>{
    if(err){
      setSuccess(false)
      setError('!Invalid account information')
      console.log(error)
    }
    setLoading(false)
    setTimeout(function(){
      setError();
   }, 6000)
  })  
 }

  useEffect(()=>{
    getAllBanks()
   },[]);
 
  return (
    <Layout title="Vetted Tailor Application">
      <Head>
        <title>Fitted</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main  className='xl:w-10/12 mx-auto'>
        {
          success ? (
            <SuccessCard banks={banks} setBanks={setBanks} bankCode={bankCode} setBankCode={setBankCode} accountNumber={accountNumber}
            setAccountNumber={setAccountNumber} setSuccess={setSuccess} error={error} setError={setError} loading={loading} setLoading={setLoading}
            />
          ) : (
            <Card>
          <h3 className=' text-lg xl:text-2xl text-center font-bold'> Vetted Tailor Application</h3>
          <div className=' grid  grid-cols-1 xl:grid-cols-2 mt-12'>
            <div className=' w-full'>
            <ProfileImage/>
              <div className=' flex flex-col w-full xl:w-8/12 mt-8 text-xs xl:text-base'>
                {data.map((item, index) => (
                  <div key={index} className=' flex mb-1.5'>
                  <p className='flex-1 text-greyLight font-semibold'>
                    {item.tag}:
                  </p>
                  <p className='flex-1 font-semibold text-dark text-xs xl:text-base'>{item.value}</p>
                </div>
                ))}
              </div>
            </div>
            <div className='hidden xl:block'>
            {error && error? 
            <Errors error={error} />
              :
              ''
            }
            <MobileForm banks={banks} setBanks={setBanks} bankCode={bankCode} setBankCode={setBankCode} accountNumber={accountNumber}
            setAccountNumber={setAccountNumber} error={error} setError={setError} loading={loading} setLoading={setLoading}
            handleBandCode={handleBandCode} handleAccountNumber={handleAccountNumber} handleSubmit={handleSubmit}
          />
            </div>

          </div>
        </Card>
          )
        }
        
        { !success &&  <div className='block xl:hidden mt-10'>
          <Card>
          {error && error? 
            <Errors error={error} />
            :
            ''
          }
          <MobileForm banks={banks} setBanks={setBanks} bankCode={bankCode} setBankCode={setBankCode} accountNumber={accountNumber}
            setAccountNumber={setAccountNumber} error={error} setError={setError} loading={loading} setLoading={setLoading}
            handleBandCode={handleBandCode} handleAccountNumber={handleAccountNumber} handleSubmit={handleSubmit}
          />
          </Card>
          </div>
        }
      </main>
    </Layout>
    )
  }
